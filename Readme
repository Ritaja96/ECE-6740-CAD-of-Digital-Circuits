Efficient and effective digital circuit design and testing require identifying the smallest set of rectification targets within the circuit. This process is critical as it can optimize the performance, scalability, and reliability of the final product. By minimizing the number of internal nets that require testing and rectification, designers can improve the cost-effectiveness and efficiency of the design process. Additionally, ensuring that all outputs are tested and rectified can significantly enhance the circuit design’s reliability and quality by reducing the risk of errors and failures. Our objective here is to find the smallest set of internal nets that can be chosen as rectification targets, in order to ensure that all the buggy outputs can be reached and tested for correctness. In other words, the objective of this report is to find the minimum number of internal nets N required such that every buggy output Z is in the transitive fanout of some ni ∈ N.


Approach:
We start by identifying all possible outputs reachable from each internal net ni. Next, we partition the set of nets into groups such that each group reaches the same set of outputs. We then formulate a table covering problem by representing each output as a row and each group as a column in an Unate Covering problem. This enables us to identify the minimum number of groups required to cover all the outputs where bugs have been observed. Finally, we select one net from each group and perform a rectification check to verify its functionality.

Example:
We utilize a circuit that features two 8-bit inputs (a0, a1, . . . , a7 and b0, b1, . . . , b7) and 8-bit output (y0 , y1 , . . . , y7 ). We assume that all 8 bits outputs are buggy. Following the first step we find the affected outputs by each internal net. On step 2 we partition the internal nets such that each partition reaches the same set of outputs.Next, we form the table covering problem.For this Unate Covering Problem, the rows correspond to the affected outputs and the columns correspond to each partition.

